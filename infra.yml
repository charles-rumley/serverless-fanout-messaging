---
AWSTemplateFormatVersion: '2010-09-09'
Description: "Write a description" # TODO
Resources:
  ConnectionManagementTable:
    Type: AWS::DynamoDB::Table
    Properties:
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: "connectionId"
          AttributeType: S
        - AttributeName: "sort"
          AttributeType: S
      KeySchema:
        - AttributeName: "connectionId"
          KeyType: HASH
        - AttributeName: "sort"
          KeyType: RANGE
      TimeToLiveSpecification:
        AttributeName: "connectionExpiration" # TODO Review this
        Enabled: true

  SubscriberMessagingApi:
    Type: AWS::ApiGatewayV2::Api
    Properties:
      Name: "messaging-api"
      Description: "API Description" # TODO
      RouteSelectionExpression: "$request.body.action"
      ProtocolType: WEBSOCKET
      CredentialsArn:
        Fn::GetAtt: ApiRole.Arn

  ConnectRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref SubscriberMessagingApi
      RouteKey: $connect
      AuthorizationType: NONE
      OperationName: "ConnectRoute"
      Target: !Sub "integrations/${ConnectIntegration}"

  ConnectIntegration:
    Type: AWS::ApiGatewayV2::Integration
    DependsOn:
      - ApiRole
    Properties:
      ApiId: !Ref SubscriberMessagingApi
      Description: Invoke a step function with the connection details
      # TODO Might be able to use the credentials of the caller to simplify this
      CredentialsArn:
        Fn::GetAtt: ApiRole.Arn
      IntegrationType: AWS
      IntegrationMethod: POST
      IntegrationUri: !Sub "arn:aws:apigateway:${AWS::Region}:states:action/StartExecution"
      TemplateSelectionExpression: \$default
      RequestTemplates:
        \$default:
          !Sub |-
            {
              "input": "{\"connectionId\": \"$context.connectionId\", \"connectedAt\": \"$context.connectedAt\"}",
              "stateMachineArn": "${PersistNewConnection}"
            }

  ConnectIntegrationResponse:
    Type: 'AWS::ApiGatewayV2::IntegrationResponse'
    Properties:
      IntegrationId: !Ref ConnectIntegration
      IntegrationResponseKey: $default
      TemplateSelectionExpression: '${integration.response.statuscode}'
      ResponseTemplates:
        '@default': '$input.body'
      ApiId: !Ref SubscriberMessagingApi

  ConnectRouteResponse:
    Type: 'AWS::ApiGatewayV2::RouteResponse'
    Properties:
      RouteId: !Ref ConnectRoute
      ApiId: !Ref SubscriberMessagingApi
      RouteResponseKey: $default

  DisconnectRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref SubscriberMessagingApi
      RouteKey: $disconnect
      AuthorizationType: NONE
      OperationName: "DisconnectRoute"
      Target: !Sub "integrations/${DisconnectIntegration}"

  DisconnectIntegration:
    Type: AWS::ApiGatewayV2::Integration
    DependsOn:
      - ApiRole
    Properties:
      ApiId: !Ref SubscriberMessagingApi
      Description: Invoke a step function with the disconnection details
      # TODO Might be able to use the credentials of the caller to simplify this
      CredentialsArn:
        Fn::GetAtt: ApiRole.Arn
      IntegrationType: AWS
      IntegrationMethod: POST
      IntegrationUri: !Sub "arn:aws:apigateway:${AWS::Region}:states:action/StartExecution"
      TemplateSelectionExpression: \$default
      RequestTemplates:
        \$default:
          !Sub |-
          {
            "input": "{\"connectionId\": \"$context.connectionId\", \"disconnectedAt\": \"$context.requestTimeEpoch\"}",
            "stateMachineArn": "${RemoveConnection}"
          }

  AcknowledgeRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref SubscriberMessagingApi
      RouteKey: acknowledge
      AuthorizationType: NONE
      OperationName: "AcknowledgeRoute"
      Target: !Sub "integrations/${AcknowledgeIntegration}"

  AcknowledgeIntegration:
    Type: AWS::ApiGatewayV2::Integration
    DependsOn:
      - ApiRole
    Properties:
      ApiId: !Ref SubscriberMessagingApi
      Description: Invoke a step function with a message sent over the websocket
      # TODO Might be able to use the credentials of the caller to simplify this
      CredentialsArn:
        Fn::GetAtt: ApiRole.Arn
      IntegrationType: AWS
      IntegrationMethod: POST
      IntegrationUri: !Sub "arn:aws:apigateway:${AWS::Region}:states:action/StartExecution"
      TemplateSelectionExpression: \$default
      # TODO Right now, the "PersistAck" function is actually handling all incoming messages,
      # not just acknowledgements
      RequestTemplates:
        \$default:
          !Sub |-
            {
              "input": "{\"connectionId\": \"$context.connectionId\", \"messageId\": \"$input.json(\'$\')\", \"acknowledgedAt\": \"$context.requestTimeEpoch\"}",
              "stateMachineArn": "${PersistAck}"
            }

  AcknowledgeIntegrationResponse:
    Type: 'AWS::ApiGatewayV2::IntegrationResponse'
    Properties:
      IntegrationId: !Ref AcknowledgeIntegration
      IntegrationResponseKey: $default
      TemplateSelectionExpression: '${integration.response.statuscode}'
      ResponseTemplates:
        '@default': '$input.body'
      ApiId: !Ref SubscriberMessagingApi

  AcknowledgeRouteResponse:
    Type: 'AWS::ApiGatewayV2::RouteResponse'
    Properties:
      RouteId: !Ref AcknowledgeRoute
      ApiId: !Ref SubscriberMessagingApi
      RouteResponseKey: $default

  Deployment:
    Type: AWS::ApiGatewayV2::Deployment
    DependsOn:
      - ConnectRoute
      - DisconnectRoute
      - AcknowledgeRoute
    Properties:
      ApiId: !Ref SubscriberMessagingApi

  Stage:
    Type: AWS::ApiGatewayV2::Stage
    Properties:
      StageName: prod
      Description: prod stage
      DeploymentId: !Ref Deployment
      ApiId: !Ref SubscriberMessagingApi

  ApiRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - apigateway.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      Policies:
        - PolicyName: invoke-step-functions
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - states:StartExecution
                Resource: "*" # TODO Add step function ARNs here
        - PolicyName: call-execute-api
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - execute-api:Invoke
                  - execute-api:ManageConnections
                Resource: "arn:aws:execute-api:*:*:*"
        - PolicyName: push-to-cw
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:DescribeLogGroups
                  - logs:DescribeLogStreams
                  - logs:PutLogEvents
                  - logs:GetLogEvents
                  - logs:FilterLogEvents
                Resource: "*"

  StepFunctionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - states.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      Policies:
        - PolicyName: allow-dynamo-access
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:GetItem
                  - dynamodb:PutItem
                  - dynamodb:UpdateItem
                  - dynamodb:DeleteItem
                Resource:
                  Fn::GetAtt: ConnectionManagementTable.Arn

  LambdaRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      Policies:
        - PolicyName: allow-dynamo-access
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:Scan
                Resource:
                  Fn::GetAtt: ConnectionManagementTable.Arn
        - PolicyName: allow-cloudwatch-access
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:*
                Resource: arn:aws:logs:*:*:*
        - PolicyName: allow-step-function-invocation
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - states:StartExecution
                Resource: arn:aws:states:*:*:*

  # persists the connection details of a new client connecting to our websocket
  PersistNewConnection:
    Type: AWS::StepFunctions::StateMachine
    Properties:
      StateMachineType: STANDARD
      DefinitionString: !Sub |-
        {
          "Comment": "Persist a given connection into Dynamo and retry until success",
          "StartAt": "persist-new-connection",
          "States": {
            "persist-new-connection": {
              "Type": "Task",
              "Resource": "arn:aws:states:::dynamodb:updateItem",
              "Parameters": {
                "TableName": "${ConnectionManagementTable}",
                "UpdateExpression": "SET connectedAt = :connectedAt",
                "ExpressionAttributeValues": {
                  ":connectedAt": {
                    "N.$": "$.connectedAt"
                  }
                },
                "Key": {
                  "connectionId": {
                    "S.$": "$.connectionId"
                  },
                  "sort": {
                    "S": "metadata"
                  }
                }
              },
              "End": true,
              "Retry": [
                {
                  "ErrorEquals": [
                    "ErrorA",
                    "ErrorB"
                  ],
                  "IntervalSeconds": 1,
                  "BackoffRate": 2,
                  "MaxAttempts": 2
                },
                {
                  "ErrorEquals": [
                    "ErrorC"
                  ],
                  "IntervalSeconds": 5
                }
              ]
            }
          }
        }
      RoleArn:
        Fn::GetAtt: StepFunctionRole.Arn

  # send a payload to a specific client until it acknowledges the message
  DeliverPayload:
    Type: AWS::StepFunctions::StateMachine
    Properties:
      StateMachineType: STANDARD
      DefinitionString: # TODO Stub
      RoleArn:
        Fn::GetAtt: StepFunctionRole.Arn

  # persist an acknowledgement received from the client that they've received our message
  PersistAck:
    Type: AWS::StepFunctions::StateMachine
    Properties:
      StateMachineType: STANDARD
      DefinitionString: !Sub |
        {
          "StartAt": "Persist Payload",
          "States": {
            "Persist Payload": {
              "Type": "Task",
              "Resource": "arn:aws:states:::dynamodb:updateItem",
              "Parameters": {
                "TableName": "${ConnectionManagementTable}",
                "UpdateExpression": "SET acknowledgedAt = :acknowledgedAt",
                "ExpressionAttributeValues": {
                  ":acknowledgedAt": {
                    "N.$": "$.acknowledgedAt"
                  }
                },
                "Key": {
                  "connectionId": {
                    "S.$": "$.connectionId"
                  },
                  "sort": {
                    "S.$": "$.messageId"
                  }
                }
              },
              "End": true,
              "Retry": [
                {
                  "ErrorEquals": [
                    "ErrorA",
                    "ErrorB"
                  ],
                  "IntervalSeconds": 1,
                  "BackoffRate": 2,
                  "MaxAttempts": 2
                },
                {
                  "ErrorEquals": [
                    "ErrorC"
                  ],
                  "IntervalSeconds": 5
                }
              ]
            }
          }
        }
      RoleArn:
        Fn::GetAtt: StepFunctionRole.Arn


  # removes the connection id of a client that's sent us a disconnection message
  RemoveConnection:
    Type: AWS::StepFunctions::StateMachine
    Properties:
      StateMachineType: STANDARD
      DefinitionString: !Sub |
        {
          "Comment": "Delete a given connection from Dynamo and retry until success",
          "StartAt": "remove-connection",
          "States": {
            "remove-connection": {
              "Type": "Task",
              "Resource": "arn:aws:states:::dynamodb:deleteItem",
              "Parameters": {
                "TableName": "${ConnectionManagementTable}",
                "ExpressionAttributeValues": {
                  ":connectedAt": {
                    "N.$": "$.connectedAt"
                  }
                },
                "Key": {
                  "connectionId": {
                    "S.$": "$.connectionId"
                  },
                  "sort": {
                    "S": "metadata"
                  }
                }
              },
              "End": true,
              "Retry": [
                {
                  "ErrorEquals": [
                    "ErrorA",
                    "ErrorB"
                  ],
                  "IntervalSeconds": 1,
                  "BackoffRate": 2,
                  "MaxAttempts": 2
                },
                {
                  "ErrorEquals": [
                    "ErrorC"
                  ],
                  "IntervalSeconds": 5
                }
              ]
            }
          }
        }
      RoleArn:
        Fn::GetAtt: StepFunctionRole.Arn

  # responsible for looking up the connection ids and kicking off delivery step functions
  FanoutMessageFunction:
    Type: AWS::Lambda::Function
    Properties:
      Runtime: nodejs12.x
      Role:
        Fn::GetAtt: LambdaRole.Arn
      Environment:
        Variables:
          CONNECTION_TABLE_NAME: !Ref ConnectionManagementTable
          PAYLOAD_DELIVERY_FUNCTION_ARN: !Ref DeliverPayload
      Handler: index.handler
      Code:
        ZipFile: |
          // Load the AWS SDK for Node.js
          const aws = require('aws-sdk');
          const crypto = require('crypto');
          // Set the region
          aws.config.update({region: process.env.AWS_REGION});

          // Create DynamoDB service object
          const ddb = new aws.DynamoDB({apiVersion: '2012-08-10'});

          // Create Step Function service object
          const stepfunctions = new aws.StepFunctions();

          exports.handler = function (event, context) {
              const params = {
                  ProjectionExpression: 'connectionId',
                  TableName: process.env.CONNECTION_TABLE_NAME
              };

              const message = {
                  payload: event.payload, // payload should already be base64 encoded
                  messageId: crypto.randomBytes(16).toString('hex')
              }

              // TODO How is paging handled here?
              ddb.scan(params, function (err, data) {
                  if (err) {
                      console.log("Error", err);
                  } else {
                      // loop through the items returned from Dynamo
                      data.Items.forEach(function (element, index, array) {
                          const connectionId = element.connectionId.S;
                          console.log("Found connectionId:" + connectionId);

                          const params = {
                              stateMachineArn: process.env.PAYLOAD_DELIVERY_FUNCTION_ARN,
                              input: JSON.stringify(message) // pass in some input
                          };

                          stepfunctions.startExecution(params, function (err, data) {
                              if (err) {
                                  console.log('err while executing step function', err)
                              } else {
                                  console.log('started execution of step function', data)
                              }
                          })

                          // TODO We're kicking off a new callback and continuing to loop through
                          //   without following up, there's a potential for bad things
                      });
                  }
              });
          }
      Description: Fan out the payload to currently connected clients

Outputs:
  WebSocketURI:
    Description: "The WSS Protocol URI to connect to"
    # TODO Use Sub here
    Value: !Join [ '', [ 'wss://', !Ref SubscriberMessagingApi, '.execute-api.', !Ref 'AWS::Region','.amazonaws.com/', !Ref 'Stage'] ]
